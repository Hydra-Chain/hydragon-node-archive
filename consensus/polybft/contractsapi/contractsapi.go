// Code generated by scapi/gen. DO NOT EDIT.
package contractsapi

import (
	"math/big"

	"github.com/0xPolygon/polygon-edge/types"
	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/abi"
)

type InitStruct struct {
	EpochReward   *big.Int `abi:"epochReward"`
	MinStake      *big.Int `abi:"minStake"`
	MinDelegation *big.Int `abi:"minDelegation"`
	EpochSize     *big.Int `abi:"epochSize"`
}

var InitStructABIType = abi.MustNewType("tuple(uint256 epochReward,uint256 minStake,uint256 minDelegation,uint256 epochSize)")

func (i *InitStruct) EncodeAbi() ([]byte, error) {
	return InitStructABIType.Encode(i)
}

func (i *InitStruct) DecodeAbi(buf []byte) error {
	return decodeStruct(InitStructABIType, buf, &i)
}

type ValidatorInit struct {
	Addr      types.Address `abi:"addr"`
	Pubkey    [4]*big.Int   `abi:"pubkey"`
	Signature [2]*big.Int   `abi:"signature"`
	Stake     *big.Int      `abi:"stake"`
}

var ValidatorInitABIType = abi.MustNewType("tuple(address addr,uint256[4] pubkey,uint256[2] signature,uint256 stake)")

func (v *ValidatorInit) EncodeAbi() ([]byte, error) {
	return ValidatorInitABIType.Encode(v)
}

func (v *ValidatorInit) DecodeAbi(buf []byte) error {
	return decodeStruct(ValidatorInitABIType, buf, &v)
}

type InitializeValidatorSetFn struct {
	Init          *InitStruct      `abi:"init"`
	NewValidators []*ValidatorInit `abi:"newValidators"`
	NewBls        types.Address    `abi:"newBls"`
	NewRewardPool types.Address    `abi:"newRewardPool"`
	Governance    types.Address    `abi:"governance"`
	LiquidToken   types.Address    `abi:"liquidToken"`
}

func (i *InitializeValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["initialize"].ID()
}

func (i *InitializeValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["initialize"], buf, i)
}

type Epoch struct {
	StartBlock *big.Int   `abi:"startBlock"`
	EndBlock   *big.Int   `abi:"endBlock"`
	EpochRoot  types.Hash `abi:"epochRoot"`
}

var EpochABIType = abi.MustNewType("tuple(uint256 startBlock,uint256 endBlock,bytes32 epochRoot)")

func (e *Epoch) EncodeAbi() ([]byte, error) {
	return EpochABIType.Encode(e)
}

func (e *Epoch) DecodeAbi(buf []byte) error {
	return decodeStruct(EpochABIType, buf, &e)
}

type CommitEpochValidatorSetFn struct {
	ID        *big.Int `abi:"id"`
	Epoch     *Epoch   `abi:"epoch"`
	EpochSize *big.Int `abi:"epochSize"`
}

func (c *CommitEpochValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["commitEpoch"].ID()
}

func (c *CommitEpochValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["commitEpoch"].Encode(c)
}

func (c *CommitEpochValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["commitEpoch"], buf, c)
}

type AddToWhitelistValidatorSetFn struct {
	WhitelistAddreses []ethgo.Address `abi:"whitelistAddreses"`
}

func (a *AddToWhitelistValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["addToWhitelist"].ID()
}

func (a *AddToWhitelistValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["addToWhitelist"].Encode(a)
}

func (a *AddToWhitelistValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["addToWhitelist"], buf, a)
}

type RegisterValidatorSetFn struct {
	Signature [2]*big.Int `abi:"signature"`
	Pubkey    [4]*big.Int `abi:"pubkey"`
}

func (r *RegisterValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["register"].ID()
}

func (r *RegisterValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["register"].Encode(r)
}

func (r *RegisterValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["register"], buf, r)
}

type WithdrawValidatorSetFn struct {
	To types.Address `abi:"to"`
}

func (w *WithdrawValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["withdraw"].ID()
}

func (w *WithdrawValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["withdraw"].Encode(w)
}

func (w *WithdrawValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["withdraw"], buf, w)
}

type NewValidatorEvent struct {
	Validator types.Address `abi:"validator"`
	BlsKey    [4]*big.Int   `abi:"blsKey"`
}

func (*NewValidatorEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["NewValidator"].ID()
}

func (n *NewValidatorEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["NewValidator"].Inputs.Encode(n)
}

func (n *NewValidatorEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["NewValidator"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["NewValidator"], log, n)
}

func (n *NewValidatorEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["NewValidator"].Inputs.DecodeStruct(input, &n)
}

type StakedEvent struct {
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*StakedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Staked"].ID()
}

func (s *StakedEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["Staked"].Inputs.Encode(s)
}

func (s *StakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Staked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Staked"], log, s)
}

func (s *StakedEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["Staked"].Inputs.DecodeStruct(input, &s)
}

type DelegatedEvent struct {
	Validator types.Address `abi:"validator"`
	Delegator types.Address `abi:"delegator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*DelegatedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Delegated"].ID()
}

func (d *DelegatedEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["Delegated"].Inputs.Encode(d)
}

func (d *DelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Delegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Delegated"], log, d)
}

func (d *DelegatedEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["Delegated"].Inputs.DecodeStruct(input, &d)
}

type UnstakedEvent struct {
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*UnstakedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Unstaked"].ID()
}

func (u *UnstakedEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["Unstaked"].Inputs.Encode(u)
}

func (u *UnstakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Unstaked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Unstaked"], log, u)
}

func (u *UnstakedEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["Unstaked"].Inputs.DecodeStruct(input, &u)
}

type UndelegatedEvent struct {
	Validator types.Address `abi:"validator"`
	Delegator types.Address `abi:"delegator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*UndelegatedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Undelegated"].ID()
}

func (u *UndelegatedEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["Undelegated"].Inputs.Encode(u)
}

func (u *UndelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Undelegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Undelegated"], log, u)
}

func (u *UndelegatedEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["Undelegated"].Inputs.DecodeStruct(input, &u)
}

type AddedToWhitelistEvent struct {
	Validator types.Address `abi:"validator"`
}

func (*AddedToWhitelistEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["AddedToWhitelist"].ID()
}

func (a *AddedToWhitelistEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["AddedToWhitelist"].Inputs.Encode(a)
}

func (a *AddedToWhitelistEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["AddedToWhitelist"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["AddedToWhitelist"], log, a)
}

func (a *AddedToWhitelistEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["AddedToWhitelist"].Inputs.DecodeStruct(input, &a)
}

type StakeChangedEvent struct {
	Validator types.Address `abi:"validator"`
	NewStake  *big.Int      `abi:"newStake"`
}

func (*StakeChangedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["StakeChanged"].ID()
}

func (s *StakeChangedEvent) Encode() ([]byte, error) {
	return ValidatorSet.Abi.Events["StakeChanged"].Inputs.Encode(s)
}

func (s *StakeChangedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["StakeChanged"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["StakeChanged"], log, s)
}

func (s *StakeChangedEvent) Decode(input []byte) error {
	return ValidatorSet.Abi.Events["StakeChanged"].Inputs.DecodeStruct(input, &s)
}

type InitializeRewardPoolFn struct {
	NewValidatorSet  types.Address `abi:"newValidatorSet"`
	NewRewardWallet  types.Address `abi:"newRewardWallet"`
	NewMinDelegation *big.Int      `abi:"newMinDelegation"`
	AprManager       types.Address `abi:"aprManager"`
}

func (i *InitializeRewardPoolFn) Sig() []byte {
	return RewardPool.Abi.Methods["initialize"].ID()
}

func (i *InitializeRewardPoolFn) EncodeAbi() ([]byte, error) {
	return RewardPool.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeRewardPoolFn) DecodeAbi(buf []byte) error {
	return decodeMethod(RewardPool.Abi.Methods["initialize"], buf, i)
}

type Uptime struct {
	Validator    types.Address `abi:"validator"`
	SignedBlocks *big.Int      `abi:"signedBlocks"`
}

var UptimeABIType = abi.MustNewType("tuple(address validator,uint256 signedBlocks)")

func (u *Uptime) EncodeAbi() ([]byte, error) {
	return UptimeABIType.Encode(u)
}

func (u *Uptime) DecodeAbi(buf []byte) error {
	return decodeStruct(UptimeABIType, buf, &u)
}

type DistributeRewardsForRewardPoolFn struct {
	EpochID   *big.Int  `abi:"epochId"`
	Uptime    []*Uptime `abi:"uptime"`
	EpochSize *big.Int  `abi:"epochSize"`
}

func (d *DistributeRewardsForRewardPoolFn) Sig() []byte {
	return RewardPool.Abi.Methods["distributeRewardsFor"].ID()
}

func (d *DistributeRewardsForRewardPoolFn) EncodeAbi() ([]byte, error) {
	return RewardPool.Abi.Methods["distributeRewardsFor"].Encode(d)
}

func (d *DistributeRewardsForRewardPoolFn) DecodeAbi(buf []byte) error {
	return decodeMethod(RewardPool.Abi.Methods["distributeRewardsFor"], buf, d)
}

type InitializeLiquidityTokenFn struct {
	Name_            string        `abi:"name_"`
	Symbol_          string        `abi:"symbol_"`
	Governer         types.Address `abi:"governer"`
	SupplyController types.Address `abi:"supplyController"`
}

func (i *InitializeLiquidityTokenFn) Sig() []byte {
	return LiquidityToken.Abi.Methods["initialize"].ID()
}

func (i *InitializeLiquidityTokenFn) EncodeAbi() ([]byte, error) {
	return LiquidityToken.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeLiquidityTokenFn) DecodeAbi(buf []byte) error {
	return decodeMethod(LiquidityToken.Abi.Methods["initialize"], buf, i)
}

type ProtectSetUpProxyGenesisProxyFn struct {
	Initiator types.Address `abi:"initiator"`
}

func (p *ProtectSetUpProxyGenesisProxyFn) Sig() []byte {
	return GenesisProxy.Abi.Methods["protectSetUpProxy"].ID()
}

func (p *ProtectSetUpProxyGenesisProxyFn) EncodeAbi() ([]byte, error) {
	return GenesisProxy.Abi.Methods["protectSetUpProxy"].Encode(p)
}

func (p *ProtectSetUpProxyGenesisProxyFn) DecodeAbi(buf []byte) error {
	return decodeMethod(GenesisProxy.Abi.Methods["protectSetUpProxy"], buf, p)
}

type SetUpProxyGenesisProxyFn struct {
	Logic types.Address `abi:"logic"`
	Admin types.Address `abi:"admin"`
	Data  []byte        `abi:"data"`
}

func (s *SetUpProxyGenesisProxyFn) Sig() []byte {
	return GenesisProxy.Abi.Methods["setUpProxy"].ID()
}

func (s *SetUpProxyGenesisProxyFn) EncodeAbi() ([]byte, error) {
	return GenesisProxy.Abi.Methods["setUpProxy"].Encode(s)
}

func (s *SetUpProxyGenesisProxyFn) DecodeAbi(buf []byte) error {
	return decodeMethod(GenesisProxy.Abi.Methods["setUpProxy"], buf, s)
}

type TransparentUpgradeableProxyConstructorFn struct {
	Logic  types.Address `abi:"_logic"`
	Admin_ types.Address `abi:"admin_"`
	Data   []byte        `abi:"_data"`
}

func (t *TransparentUpgradeableProxyConstructorFn) Sig() []byte {
	return TransparentUpgradeableProxy.Abi.Constructor.ID()
}

func (t *TransparentUpgradeableProxyConstructorFn) EncodeAbi() ([]byte, error) {
	return TransparentUpgradeableProxy.Abi.Constructor.Inputs.Encode(t)
}

func (t *TransparentUpgradeableProxyConstructorFn) DecodeAbi(buf []byte) error {
	return decodeMethod(TransparentUpgradeableProxy.Abi.Constructor, buf, t)
}
