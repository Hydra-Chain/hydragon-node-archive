// Code generated by scapi/gen. DO NOT EDIT.
package contractsapi

import (
	"math/big"

	"github.com/0xPolygon/polygon-edge/types"
	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/abi"
)

type Epoch struct {
	StartBlock *big.Int   `abi:"startBlock"`
	EndBlock   *big.Int   `abi:"endBlock"`
	EpochRoot  types.Hash `abi:"epochRoot"`
}

var EpochABIType = abi.MustNewType("tuple(uint256 startBlock,uint256 endBlock,bytes32 epochRoot)")

func (e *Epoch) EncodeAbi() ([]byte, error) {
	return EpochABIType.Encode(e)
}

func (e *Epoch) DecodeAbi(buf []byte) error {
	return decodeStruct(EpochABIType, buf, &e)
}

type UptimeData struct {
	Validator    types.Address `abi:"validator"`
	SignedBlocks *big.Int      `abi:"signedBlocks"`
}

var UptimeDataABIType = abi.MustNewType("tuple(address validator,uint256 signedBlocks)")

func (u *UptimeData) EncodeAbi() ([]byte, error) {
	return UptimeDataABIType.Encode(u)
}

func (u *UptimeData) DecodeAbi(buf []byte) error {
	return decodeStruct(UptimeDataABIType, buf, &u)
}

type Uptime struct {
	EpochID     *big.Int      `abi:"epochId"`
	UptimeData  []*UptimeData `abi:"uptimeData"`
	TotalBlocks *big.Int      `abi:"totalBlocks"`
}

var UptimeABIType = abi.MustNewType("tuple(uint256 epochId,tuple(address validator,uint256 signedBlocks)[] uptimeData,uint256 totalBlocks)")

func (u *Uptime) EncodeAbi() ([]byte, error) {
	return UptimeABIType.Encode(u)
}

func (u *Uptime) DecodeAbi(buf []byte) error {
	return decodeStruct(UptimeABIType, buf, &u)
}

type CommitEpochValidatorSetFn struct {
	ID     *big.Int `abi:"id"`
	Epoch  *Epoch   `abi:"epoch"`
	Uptime *Uptime  `abi:"uptime"`
}

func (c *CommitEpochValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["commitEpoch"].ID()
}

func (c *CommitEpochValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["commitEpoch"].Encode(c)
}

func (c *CommitEpochValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["commitEpoch"], buf, c)
}

type InitStruct struct {
	EpochReward   *big.Int `abi:"epochReward"`
	MinStake      *big.Int `abi:"minStake"`
	MinDelegation *big.Int `abi:"minDelegation"`
	EpochSize     *big.Int `abi:"epochSize"`
}

var InitStructABIType = abi.MustNewType("tuple(uint256 epochReward,uint256 minStake,uint256 minDelegation,uint256 epochSize)")

func (i *InitStruct) EncodeAbi() ([]byte, error) {
	return InitStructABIType.Encode(i)
}

func (i *InitStruct) DecodeAbi(buf []byte) error {
	return decodeStruct(InitStructABIType, buf, &i)
}

type ValidatorInit struct {
	Addr      types.Address `abi:"addr"`
	Pubkey    [4]*big.Int   `abi:"pubkey"`
	Signature [2]*big.Int   `abi:"signature"`
	Stake     *big.Int      `abi:"stake"`
}

var ValidatorInitABIType = abi.MustNewType("tuple(address addr,uint256[4] pubkey,uint256[2] signature,uint256 stake)")

func (v *ValidatorInit) EncodeAbi() ([]byte, error) {
	return ValidatorInitABIType.Encode(v)
}

func (v *ValidatorInit) DecodeAbi(buf []byte) error {
	return decodeStruct(ValidatorInitABIType, buf, &v)
}

type InitializeValidatorSetFn struct {
	Init        *InitStruct      `abi:"init"`
	Validators  []*ValidatorInit `abi:"validators"`
	NewBls      types.Address    `abi:"newBls"`
	Governance  types.Address    `abi:"governance"`
	LiquidToken types.Address    `abi:"liquidToken"`
}

func (i *InitializeValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["initialize"].ID()
}

func (i *InitializeValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["initialize"], buf, i)
}

type AddToWhitelistValidatorSetFn struct {
	WhitelistAddreses []ethgo.Address `abi:"whitelistAddreses"`
}

func (a *AddToWhitelistValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["addToWhitelist"].ID()
}

func (a *AddToWhitelistValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["addToWhitelist"].Encode(a)
}

func (a *AddToWhitelistValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["addToWhitelist"], buf, a)
}

type RegisterValidatorSetFn struct {
	Signature [2]*big.Int `abi:"signature"`
	Pubkey    [4]*big.Int `abi:"pubkey"`
}

func (r *RegisterValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["register"].ID()
}

func (r *RegisterValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["register"].Encode(r)
}

func (r *RegisterValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["register"], buf, r)
}

type WithdrawValidatorSetFn struct {
	To types.Address `abi:"to"`
}

func (w *WithdrawValidatorSetFn) Sig() []byte {
	return ValidatorSet.Abi.Methods["withdraw"].ID()
}

func (w *WithdrawValidatorSetFn) EncodeAbi() ([]byte, error) {
	return ValidatorSet.Abi.Methods["withdraw"].Encode(w)
}

func (w *WithdrawValidatorSetFn) DecodeAbi(buf []byte) error {
	return decodeMethod(ValidatorSet.Abi.Methods["withdraw"], buf, w)
}

type NewValidatorEvent struct {
	Validator types.Address `abi:"validator"`
	BlsKey    [4]*big.Int   `abi:"blsKey"`
}

func (*NewValidatorEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["NewValidator"].ID()
}

func (*NewValidatorEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["NewValidator"].Inputs.Encode(inputs)
}

func (n *NewValidatorEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["NewValidator"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["NewValidator"], log, n)
}

type StakedEvent struct {
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*StakedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Staked"].ID()
}

func (*StakedEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Staked"].Inputs.Encode(inputs)
}

func (s *StakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Staked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Staked"], log, s)
}

type DelegatedEvent struct {
	Delegator types.Address `abi:"delegator"`
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*DelegatedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Delegated"].ID()
}

func (*DelegatedEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Delegated"].Inputs.Encode(inputs)
}

func (d *DelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Delegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Delegated"], log, d)
}

type UnstakedEvent struct {
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*UnstakedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Unstaked"].ID()
}

func (*UnstakedEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Unstaked"].Inputs.Encode(inputs)
}

func (u *UnstakedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Unstaked"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Unstaked"], log, u)
}

type UndelegatedEvent struct {
	Delegator types.Address `abi:"delegator"`
	Validator types.Address `abi:"validator"`
	Amount    *big.Int      `abi:"amount"`
}

func (*UndelegatedEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Undelegated"].ID()
}

func (*UndelegatedEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Undelegated"].Inputs.Encode(inputs)
}

func (u *UndelegatedEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Undelegated"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Undelegated"], log, u)
}

type AddedToWhitelistEvent struct {
	Validator types.Address `abi:"validator"`
}

func (*AddedToWhitelistEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["AddedToWhitelist"].ID()
}

func (*AddedToWhitelistEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["AddedToWhitelist"].Inputs.Encode(inputs)
}

func (a *AddedToWhitelistEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["AddedToWhitelist"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["AddedToWhitelist"], log, a)
}

type WithdrawalEvent struct {
	Account types.Address `abi:"account"`
	To      types.Address `abi:"to"`
	Amount  *big.Int      `abi:"amount"`
}

func (*WithdrawalEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Withdrawal"].ID()
}

func (*WithdrawalEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Withdrawal"].Inputs.Encode(inputs)
}

func (w *WithdrawalEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Withdrawal"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Withdrawal"], log, w)
}

type TransferEvent struct {
	From  types.Address `abi:"from"`
	To    types.Address `abi:"to"`
	Value *big.Int      `abi:"value"`
}

func (*TransferEvent) Sig() ethgo.Hash {
	return ValidatorSet.Abi.Events["Transfer"].ID()
}

func (*TransferEvent) Encode(inputs interface{}) ([]byte, error) {
	return ValidatorSet.Abi.Events["Transfer"].Inputs.Encode(inputs)
}

func (t *TransferEvent) ParseLog(log *ethgo.Log) (bool, error) {
	if !ValidatorSet.Abi.Events["Transfer"].Match(log) {
		return false, nil
	}

	return true, decodeEvent(ValidatorSet.Abi.Events["Transfer"], log, t)
}

type InitializeLiquidityTokenFn struct {
	Name_            string        `abi:"name_"`
	Symbol_          string        `abi:"symbol_"`
	Governer         types.Address `abi:"governer"`
	SupplyController types.Address `abi:"supplyController"`
}

func (i *InitializeLiquidityTokenFn) Sig() []byte {
	return LiquidityToken.Abi.Methods["initialize"].ID()
}

func (i *InitializeLiquidityTokenFn) EncodeAbi() ([]byte, error) {
	return LiquidityToken.Abi.Methods["initialize"].Encode(i)
}

func (i *InitializeLiquidityTokenFn) DecodeAbi(buf []byte) error {
	return decodeMethod(LiquidityToken.Abi.Methods["initialize"], buf, i)
}
